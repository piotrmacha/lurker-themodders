/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.piotrmacha.lurker.jooq.Indexes;
import pl.piotrmacha.lurker.jooq.Keys;
import pl.piotrmacha.lurker.jooq.Public;
import pl.piotrmacha.lurker.jooq.tables.Account.AccountPath;
import pl.piotrmacha.lurker.jooq.tables.Post.PostPath;
import pl.piotrmacha.lurker.jooq.tables.Topic.TopicPath;
import pl.piotrmacha.lurker.jooq.tables.records.PostFulltextRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PostFulltext extends TableImpl<PostFulltextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.post_fulltext</code>
     */
    public static final PostFulltext POST_FULLTEXT = new PostFulltext();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostFulltextRecord> getRecordType() {
        return PostFulltextRecord.class;
    }

    /**
     * The column <code>public.post_fulltext.post_id</code>.
     */
    public final TableField<PostFulltextRecord, Long> POST_ID = createField(DSL.name("post_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.post_fulltext.topic_id</code>.
     */
    public final TableField<PostFulltextRecord, Long> TOPIC_ID = createField(DSL.name("topic_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.post_fulltext.author_id</code>.
     */
    public final TableField<PostFulltextRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.post_fulltext.content</code>.
     */
    public final TableField<PostFulltextRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.post_fulltext.topic</code>.
     */
    public final TableField<PostFulltextRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.post_fulltext.author</code>.
     */
    public final TableField<PostFulltextRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<PostFulltextRecord, Object> SEARCH_VECTOR_ENGLISH = createField(DSL.name("search_vector_english"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<PostFulltextRecord, Object> SEARCH_VECTOR_POLISH = createField(DSL.name("search_vector_polish"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""), this, "");

    private PostFulltext(Name alias, Table<PostFulltextRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PostFulltext(Name alias, Table<PostFulltextRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.post_fulltext</code> table reference
     */
    public PostFulltext(String alias) {
        this(DSL.name(alias), POST_FULLTEXT);
    }

    /**
     * Create an aliased <code>public.post_fulltext</code> table reference
     */
    public PostFulltext(Name alias) {
        this(alias, POST_FULLTEXT);
    }

    /**
     * Create a <code>public.post_fulltext</code> table reference
     */
    public PostFulltext() {
        this(DSL.name("post_fulltext"), null);
    }

    public <O extends Record> PostFulltext(Table<O> path, ForeignKey<O, PostFulltextRecord> childPath, InverseForeignKey<O, PostFulltextRecord> parentPath) {
        super(path, childPath, parentPath, POST_FULLTEXT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PostFulltextPath extends PostFulltext implements Path<PostFulltextRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PostFulltextPath(Table<O> path, ForeignKey<O, PostFulltextRecord> childPath, InverseForeignKey<O, PostFulltextRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PostFulltextPath(Name alias, Table<PostFulltextRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PostFulltextPath as(String alias) {
            return new PostFulltextPath(DSL.name(alias), this);
        }

        @Override
        public PostFulltextPath as(Name alias) {
            return new PostFulltextPath(alias, this);
        }

        @Override
        public PostFulltextPath as(Table<?> alias) {
            return new PostFulltextPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POST_FULLTEXT_SEARCH_VECTOR_ENGLISH_IDX, Indexes.POST_FULLTEXT_SEARCH_VECTOR_POLISH_IDX);
    }

    @Override
    public UniqueKey<PostFulltextRecord> getPrimaryKey() {
        return Keys.POST_FULLTEXT_PKEY;
    }

    @Override
    public List<ForeignKey<PostFulltextRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POST_FULLTEXT__POST_FULLTEXT_POST_ID_FKEY, Keys.POST_FULLTEXT__POST_FULLTEXT_TOPIC_ID_FKEY, Keys.POST_FULLTEXT__POST_FULLTEXT_AUTHOR_ID_FKEY);
    }

    private transient PostPath _post;

    /**
     * Get the implicit join path to the <code>public.post</code> table.
     */
    public PostPath post() {
        if (_post == null)
            _post = new PostPath(this, Keys.POST_FULLTEXT__POST_FULLTEXT_POST_ID_FKEY, null);

        return _post;
    }

    private transient TopicPath _topic;

    /**
     * Get the implicit join path to the <code>public.topic</code> table.
     */
    public TopicPath topic() {
        if (_topic == null)
            _topic = new TopicPath(this, Keys.POST_FULLTEXT__POST_FULLTEXT_TOPIC_ID_FKEY, null);

        return _topic;
    }

    private transient AccountPath _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, Keys.POST_FULLTEXT__POST_FULLTEXT_AUTHOR_ID_FKEY, null);

        return _account;
    }

    @Override
    public PostFulltext as(String alias) {
        return new PostFulltext(DSL.name(alias), this);
    }

    @Override
    public PostFulltext as(Name alias) {
        return new PostFulltext(alias, this);
    }

    @Override
    public PostFulltext as(Table<?> alias) {
        return new PostFulltext(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostFulltext rename(String name) {
        return new PostFulltext(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostFulltext rename(Name name) {
        return new PostFulltext(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostFulltext rename(Table<?> name) {
        return new PostFulltext(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostFulltext where(Condition condition) {
        return new PostFulltext(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostFulltext where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostFulltext where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostFulltext where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostFulltext where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostFulltext where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostFulltext where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostFulltext where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostFulltext whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostFulltext whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
