/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.piotrmacha.lurker.jooq.Keys;
import pl.piotrmacha.lurker.jooq.Public;
import pl.piotrmacha.lurker.jooq.tables.Account.AccountPath;
import pl.piotrmacha.lurker.jooq.tables.records.AssetRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Asset extends TableImpl<AssetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.asset</code>
     */
    public static final Asset ASSET = new Asset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetRecord> getRecordType() {
        return AssetRecord.class;
    }

    /**
     * The column <code>public.asset.id</code>.
     */
    public final TableField<AssetRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.asset.name</code>.
     */
    public final TableField<AssetRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asset.url</code>.
     */
    public final TableField<AssetRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asset.data</code>.
     */
    public final TableField<AssetRecord, byte[]> DATA = createField(DSL.name("data"), SQLDataType.BLOB, this, "");

    private Asset(Name alias, Table<AssetRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Asset(Name alias, Table<AssetRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.asset</code> table reference
     */
    public Asset(String alias) {
        this(DSL.name(alias), ASSET);
    }

    /**
     * Create an aliased <code>public.asset</code> table reference
     */
    public Asset(Name alias) {
        this(alias, ASSET);
    }

    /**
     * Create a <code>public.asset</code> table reference
     */
    public Asset() {
        this(DSL.name("asset"), null);
    }

    public <O extends Record> Asset(Table<O> path, ForeignKey<O, AssetRecord> childPath, InverseForeignKey<O, AssetRecord> parentPath) {
        super(path, childPath, parentPath, ASSET);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AssetPath extends Asset implements Path<AssetRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AssetPath(Table<O> path, ForeignKey<O, AssetRecord> childPath, InverseForeignKey<O, AssetRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AssetPath(Name alias, Table<AssetRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AssetPath as(String alias) {
            return new AssetPath(DSL.name(alias), this);
        }

        @Override
        public AssetPath as(Name alias) {
            return new AssetPath(alias, this);
        }

        @Override
        public AssetPath as(Table<?> alias) {
            return new AssetPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AssetRecord> getPrimaryKey() {
        return Keys.ASSET_PKEY;
    }

    private transient AccountPath _account;

    /**
     * Get the implicit to-many join path to the <code>public.account</code>
     * table
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, null, Keys.ACCOUNT__ACCOUNT_AVATAR_FKEY.getInverseKey());

        return _account;
    }

    @Override
    public Asset as(String alias) {
        return new Asset(DSL.name(alias), this);
    }

    @Override
    public Asset as(Name alias) {
        return new Asset(alias, this);
    }

    @Override
    public Asset as(Table<?> alias) {
        return new Asset(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(String name) {
        return new Asset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(Name name) {
        return new Asset(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(Table<?> name) {
        return new Asset(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asset where(Condition condition) {
        return new Asset(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asset where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asset where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asset where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asset where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asset where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asset where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asset where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asset whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asset whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
