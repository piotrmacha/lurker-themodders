/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.piotrmacha.lurker.jooq.Keys;
import pl.piotrmacha.lurker.jooq.Public;
import pl.piotrmacha.lurker.jooq.tables.records.DownloadQueueDoneRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DownloadQueueDone extends TableImpl<DownloadQueueDoneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.download_queue_done</code>
     */
    public static final DownloadQueueDone DOWNLOAD_QUEUE_DONE = new DownloadQueueDone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DownloadQueueDoneRecord> getRecordType() {
        return DownloadQueueDoneRecord.class;
    }

    /**
     * The column <code>public.download_queue_done.id</code>.
     */
    public final TableField<DownloadQueueDoneRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.download_queue_done.type</code>.
     */
    public final TableField<DownloadQueueDoneRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.download_queue_done.url</code>.
     */
    public final TableField<DownloadQueueDoneRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.download_queue_done.entity_id</code>.
     */
    public final TableField<DownloadQueueDoneRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.download_queue_done.created_at</code>.
     */
    public final TableField<DownloadQueueDoneRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.download_queue_done.done_at</code>.
     */
    public final TableField<DownloadQueueDoneRecord, OffsetDateTime> DONE_AT = createField(DSL.name("done_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private DownloadQueueDone(Name alias, Table<DownloadQueueDoneRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DownloadQueueDone(Name alias, Table<DownloadQueueDoneRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.download_queue_done</code> table reference
     */
    public DownloadQueueDone(String alias) {
        this(DSL.name(alias), DOWNLOAD_QUEUE_DONE);
    }

    /**
     * Create an aliased <code>public.download_queue_done</code> table reference
     */
    public DownloadQueueDone(Name alias) {
        this(alias, DOWNLOAD_QUEUE_DONE);
    }

    /**
     * Create a <code>public.download_queue_done</code> table reference
     */
    public DownloadQueueDone() {
        this(DSL.name("download_queue_done"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DownloadQueueDoneRecord> getPrimaryKey() {
        return Keys.DOWNLOAD_QUEUE_DONE_PKEY;
    }

    @Override
    public List<Check<DownloadQueueDoneRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("download_queue_done_type_check"), "((type = ANY (ARRAY['ASSET'::text, 'BOARD'::text, 'TOPIC'::text])))", true)
        );
    }

    @Override
    public DownloadQueueDone as(String alias) {
        return new DownloadQueueDone(DSL.name(alias), this);
    }

    @Override
    public DownloadQueueDone as(Name alias) {
        return new DownloadQueueDone(alias, this);
    }

    @Override
    public DownloadQueueDone as(Table<?> alias) {
        return new DownloadQueueDone(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DownloadQueueDone rename(String name) {
        return new DownloadQueueDone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DownloadQueueDone rename(Name name) {
        return new DownloadQueueDone(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DownloadQueueDone rename(Table<?> name) {
        return new DownloadQueueDone(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DownloadQueueDone where(Condition condition) {
        return new DownloadQueueDone(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DownloadQueueDone where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DownloadQueueDone where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DownloadQueueDone where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DownloadQueueDone where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DownloadQueueDone where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DownloadQueueDone where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DownloadQueueDone where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DownloadQueueDone whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DownloadQueueDone whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
