/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.piotrmacha.lurker.jooq.Indexes;
import pl.piotrmacha.lurker.jooq.Keys;
import pl.piotrmacha.lurker.jooq.Public;
import pl.piotrmacha.lurker.jooq.tables.Board.BoardPath;
import pl.piotrmacha.lurker.jooq.tables.Topic.TopicPath;
import pl.piotrmacha.lurker.jooq.tables.records.BoardRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Board extends TableImpl<BoardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.board</code>
     */
    public static final Board BOARD = new Board();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoardRecord> getRecordType() {
        return BoardRecord.class;
    }

    /**
     * The column <code>public.board.id</code>.
     */
    public final TableField<BoardRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.board.oid</code>.
     */
    public final TableField<BoardRecord, String> OID = createField(DSL.name("oid"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.board.url</code>.
     */
    public final TableField<BoardRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.board.name</code>.
     */
    public final TableField<BoardRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.board.description</code>.
     */
    public final TableField<BoardRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.board.parent_id</code>.
     */
    public final TableField<BoardRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.board.last_update</code>.
     */
    public final TableField<BoardRecord, OffsetDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Board(Name alias, Table<BoardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Board(Name alias, Table<BoardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.board</code> table reference
     */
    public Board(String alias) {
        this(DSL.name(alias), BOARD);
    }

    /**
     * Create an aliased <code>public.board</code> table reference
     */
    public Board(Name alias) {
        this(alias, BOARD);
    }

    /**
     * Create a <code>public.board</code> table reference
     */
    public Board() {
        this(DSL.name("board"), null);
    }

    public <O extends Record> Board(Table<O> path, ForeignKey<O, BoardRecord> childPath, InverseForeignKey<O, BoardRecord> parentPath) {
        super(path, childPath, parentPath, BOARD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BoardPath extends Board implements Path<BoardRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BoardPath(Table<O> path, ForeignKey<O, BoardRecord> childPath, InverseForeignKey<O, BoardRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BoardPath(Name alias, Table<BoardRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BoardPath as(String alias) {
            return new BoardPath(DSL.name(alias), this);
        }

        @Override
        public BoardPath as(Name alias) {
            return new BoardPath(alias, this);
        }

        @Override
        public BoardPath as(Table<?> alias) {
            return new BoardPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BOARD_OID_IDX);
    }

    @Override
    public Identity<BoardRecord, Long> getIdentity() {
        return (Identity<BoardRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BoardRecord> getPrimaryKey() {
        return Keys.BOARD_PKEY;
    }

    @Override
    public List<ForeignKey<BoardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOARD__BOARD_PARENT_ID_FKEY);
    }

    private transient BoardPath _board;

    /**
     * Get the implicit join path to the <code>public.board</code> table.
     */
    public BoardPath board() {
        if (_board == null)
            _board = new BoardPath(this, Keys.BOARD__BOARD_PARENT_ID_FKEY, null);

        return _board;
    }

    private transient TopicPath _topic;

    /**
     * Get the implicit to-many join path to the <code>public.topic</code> table
     */
    public TopicPath topic() {
        if (_topic == null)
            _topic = new TopicPath(this, null, Keys.TOPIC__TOPIC_BOARD_ID_FKEY.getInverseKey());

        return _topic;
    }

    @Override
    public Board as(String alias) {
        return new Board(DSL.name(alias), this);
    }

    @Override
    public Board as(Name alias) {
        return new Board(alias, this);
    }

    @Override
    public Board as(Table<?> alias) {
        return new Board(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Board rename(String name) {
        return new Board(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Board rename(Name name) {
        return new Board(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Board rename(Table<?> name) {
        return new Board(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Board where(Condition condition) {
        return new Board(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Board where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Board where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Board where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Board where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Board where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Board where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Board where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Board whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Board whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
