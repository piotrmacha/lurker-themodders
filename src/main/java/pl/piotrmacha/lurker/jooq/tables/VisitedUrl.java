/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.piotrmacha.lurker.jooq.Keys;
import pl.piotrmacha.lurker.jooq.Public;
import pl.piotrmacha.lurker.jooq.tables.records.VisitedUrlRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VisitedUrl extends TableImpl<VisitedUrlRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.visited_url</code>
     */
    public static final VisitedUrl VISITED_URL = new VisitedUrl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitedUrlRecord> getRecordType() {
        return VisitedUrlRecord.class;
    }

    /**
     * The column <code>public.visited_url.url</code>.
     */
    public final TableField<VisitedUrlRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.visited_url.visited_at</code>.
     */
    public final TableField<VisitedUrlRecord, OffsetDateTime> VISITED_AT = createField(DSL.name("visited_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private VisitedUrl(Name alias, Table<VisitedUrlRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VisitedUrl(Name alias, Table<VisitedUrlRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.visited_url</code> table reference
     */
    public VisitedUrl(String alias) {
        this(DSL.name(alias), VISITED_URL);
    }

    /**
     * Create an aliased <code>public.visited_url</code> table reference
     */
    public VisitedUrl(Name alias) {
        this(alias, VISITED_URL);
    }

    /**
     * Create a <code>public.visited_url</code> table reference
     */
    public VisitedUrl() {
        this(DSL.name("visited_url"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<VisitedUrlRecord> getPrimaryKey() {
        return Keys.VISITED_URL_PKEY;
    }

    @Override
    public VisitedUrl as(String alias) {
        return new VisitedUrl(DSL.name(alias), this);
    }

    @Override
    public VisitedUrl as(Name alias) {
        return new VisitedUrl(alias, this);
    }

    @Override
    public VisitedUrl as(Table<?> alias) {
        return new VisitedUrl(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitedUrl rename(String name) {
        return new VisitedUrl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitedUrl rename(Name name) {
        return new VisitedUrl(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitedUrl rename(Table<?> name) {
        return new VisitedUrl(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VisitedUrl where(Condition condition) {
        return new VisitedUrl(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VisitedUrl where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VisitedUrl where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VisitedUrl where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VisitedUrl where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VisitedUrl where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VisitedUrl where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VisitedUrl where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VisitedUrl whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VisitedUrl whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
