/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.piotrmacha.lurker.jooq.Keys;
import pl.piotrmacha.lurker.jooq.Public;
import pl.piotrmacha.lurker.jooq.tables.Asset.AssetPath;
import pl.piotrmacha.lurker.jooq.tables.Post.PostPath;
import pl.piotrmacha.lurker.jooq.tables.records.PostAttachmentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PostAttachment extends TableImpl<PostAttachmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.post_attachment</code>
     */
    public static final PostAttachment POST_ATTACHMENT = new PostAttachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostAttachmentRecord> getRecordType() {
        return PostAttachmentRecord.class;
    }

    /**
     * The column <code>public.post_attachment.post_id</code>.
     */
    public final TableField<PostAttachmentRecord, Long> POST_ID = createField(DSL.name("post_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.post_attachment.asset_id</code>.
     */
    public final TableField<PostAttachmentRecord, Long> ASSET_ID = createField(DSL.name("asset_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PostAttachment(Name alias, Table<PostAttachmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PostAttachment(Name alias, Table<PostAttachmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.post_attachment</code> table reference
     */
    public PostAttachment(String alias) {
        this(DSL.name(alias), POST_ATTACHMENT);
    }

    /**
     * Create an aliased <code>public.post_attachment</code> table reference
     */
    public PostAttachment(Name alias) {
        this(alias, POST_ATTACHMENT);
    }

    /**
     * Create a <code>public.post_attachment</code> table reference
     */
    public PostAttachment() {
        this(DSL.name("post_attachment"), null);
    }

    public <O extends Record> PostAttachment(Table<O> path, ForeignKey<O, PostAttachmentRecord> childPath, InverseForeignKey<O, PostAttachmentRecord> parentPath) {
        super(path, childPath, parentPath, POST_ATTACHMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PostAttachmentPath extends PostAttachment implements Path<PostAttachmentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PostAttachmentPath(Table<O> path, ForeignKey<O, PostAttachmentRecord> childPath, InverseForeignKey<O, PostAttachmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PostAttachmentPath(Name alias, Table<PostAttachmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PostAttachmentPath as(String alias) {
            return new PostAttachmentPath(DSL.name(alias), this);
        }

        @Override
        public PostAttachmentPath as(Name alias) {
            return new PostAttachmentPath(alias, this);
        }

        @Override
        public PostAttachmentPath as(Table<?> alias) {
            return new PostAttachmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PostAttachmentRecord> getPrimaryKey() {
        return Keys.POST_ATTACHMENT_PKEY;
    }

    @Override
    public List<ForeignKey<PostAttachmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POST_ATTACHMENT__POST_ATTACHMENT_POST_ID_FKEY, Keys.POST_ATTACHMENT__POST_ATTACHMENT_ASSET_ID_FKEY);
    }

    private transient PostPath _post;

    /**
     * Get the implicit join path to the <code>public.post</code> table.
     */
    public PostPath post() {
        if (_post == null)
            _post = new PostPath(this, Keys.POST_ATTACHMENT__POST_ATTACHMENT_POST_ID_FKEY, null);

        return _post;
    }

    private transient AssetPath _asset;

    /**
     * Get the implicit join path to the <code>public.asset</code> table.
     */
    public AssetPath asset() {
        if (_asset == null)
            _asset = new AssetPath(this, Keys.POST_ATTACHMENT__POST_ATTACHMENT_ASSET_ID_FKEY, null);

        return _asset;
    }

    @Override
    public PostAttachment as(String alias) {
        return new PostAttachment(DSL.name(alias), this);
    }

    @Override
    public PostAttachment as(Name alias) {
        return new PostAttachment(alias, this);
    }

    @Override
    public PostAttachment as(Table<?> alias) {
        return new PostAttachment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostAttachment rename(String name) {
        return new PostAttachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostAttachment rename(Name name) {
        return new PostAttachment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostAttachment rename(Table<?> name) {
        return new PostAttachment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostAttachment where(Condition condition) {
        return new PostAttachment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostAttachment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostAttachment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostAttachment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostAttachment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostAttachment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostAttachment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostAttachment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostAttachment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostAttachment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
