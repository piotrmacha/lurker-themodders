/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.piotrmacha.lurker.jooq.Keys;
import pl.piotrmacha.lurker.jooq.Public;
import pl.piotrmacha.lurker.jooq.tables.Account.AccountPath;
import pl.piotrmacha.lurker.jooq.tables.Category.CategoryPath;
import pl.piotrmacha.lurker.jooq.tables.Post.PostPath;
import pl.piotrmacha.lurker.jooq.tables.records.ThreadRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Thread extends TableImpl<ThreadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.thread</code>
     */
    public static final Thread THREAD = new Thread();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThreadRecord> getRecordType() {
        return ThreadRecord.class;
    }

    /**
     * The column <code>public.thread.id</code>.
     */
    public final TableField<ThreadRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.thread.title</code>.
     */
    public final TableField<ThreadRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.thread.author</code>.
     */
    public final TableField<ThreadRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.thread.category</code>.
     */
    public final TableField<ThreadRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.thread.url</code>.
     */
    public final TableField<ThreadRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.thread.created_at</code>.
     */
    public final TableField<ThreadRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Thread(Name alias, Table<ThreadRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Thread(Name alias, Table<ThreadRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.thread</code> table reference
     */
    public Thread(String alias) {
        this(DSL.name(alias), THREAD);
    }

    /**
     * Create an aliased <code>public.thread</code> table reference
     */
    public Thread(Name alias) {
        this(alias, THREAD);
    }

    /**
     * Create a <code>public.thread</code> table reference
     */
    public Thread() {
        this(DSL.name("thread"), null);
    }

    public <O extends Record> Thread(Table<O> path, ForeignKey<O, ThreadRecord> childPath, InverseForeignKey<O, ThreadRecord> parentPath) {
        super(path, childPath, parentPath, THREAD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ThreadPath extends Thread implements Path<ThreadRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ThreadPath(Table<O> path, ForeignKey<O, ThreadRecord> childPath, InverseForeignKey<O, ThreadRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ThreadPath(Name alias, Table<ThreadRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ThreadPath as(String alias) {
            return new ThreadPath(DSL.name(alias), this);
        }

        @Override
        public ThreadPath as(Name alias) {
            return new ThreadPath(alias, this);
        }

        @Override
        public ThreadPath as(Table<?> alias) {
            return new ThreadPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ThreadRecord> getPrimaryKey() {
        return Keys.THREAD_PKEY;
    }

    @Override
    public List<ForeignKey<ThreadRecord, ?>> getReferences() {
        return Arrays.asList(Keys.THREAD__THREAD_AUTHOR_FKEY, Keys.THREAD__THREAD_CATEGORY_FKEY);
    }

    private transient AccountPath _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, Keys.THREAD__THREAD_AUTHOR_FKEY, null);

        return _account;
    }

    private transient CategoryPath _category;

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public CategoryPath category() {
        if (_category == null)
            _category = new CategoryPath(this, Keys.THREAD__THREAD_CATEGORY_FKEY, null);

        return _category;
    }

    private transient PostPath _post;

    /**
     * Get the implicit to-many join path to the <code>public.post</code> table
     */
    public PostPath post() {
        if (_post == null)
            _post = new PostPath(this, null, Keys.POST__POST_THREAD_FKEY.getInverseKey());

        return _post;
    }

    @Override
    public Thread as(String alias) {
        return new Thread(DSL.name(alias), this);
    }

    @Override
    public Thread as(Name alias) {
        return new Thread(alias, this);
    }

    @Override
    public Thread as(Table<?> alias) {
        return new Thread(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(String name) {
        return new Thread(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(Name name) {
        return new Thread(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(Table<?> name) {
        return new Thread(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Thread where(Condition condition) {
        return new Thread(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Thread where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Thread where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Thread where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Thread where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Thread where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Thread where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Thread where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Thread whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Thread whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
