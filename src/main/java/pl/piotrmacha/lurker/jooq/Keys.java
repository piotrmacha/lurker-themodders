/*
 * This file is generated by jOOQ.
 */
package pl.piotrmacha.lurker.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import pl.piotrmacha.lurker.jooq.tables.Account;
import pl.piotrmacha.lurker.jooq.tables.Asset;
import pl.piotrmacha.lurker.jooq.tables.Category;
import pl.piotrmacha.lurker.jooq.tables.FlywaySchemaHistory;
import pl.piotrmacha.lurker.jooq.tables.Post;
import pl.piotrmacha.lurker.jooq.tables.Thread;
import pl.piotrmacha.lurker.jooq.tables.VisitedUrl;
import pl.piotrmacha.lurker.jooq.tables.records.AccountRecord;
import pl.piotrmacha.lurker.jooq.tables.records.AssetRecord;
import pl.piotrmacha.lurker.jooq.tables.records.CategoryRecord;
import pl.piotrmacha.lurker.jooq.tables.records.FlywaySchemaHistoryRecord;
import pl.piotrmacha.lurker.jooq.tables.records.PostRecord;
import pl.piotrmacha.lurker.jooq.tables.records.ThreadRecord;
import pl.piotrmacha.lurker.jooq.tables.records.VisitedUrlRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AssetRecord> ASSET_PKEY = Internal.createUniqueKey(Asset.ASSET, DSL.name("asset_pkey"), new TableField[] { Asset.ASSET.ID }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<PostRecord> POST_PKEY = Internal.createUniqueKey(Post.POST, DSL.name("post_pkey"), new TableField[] { Post.POST.ID }, true);
    public static final UniqueKey<ThreadRecord> THREAD_PKEY = Internal.createUniqueKey(Thread.THREAD, DSL.name("thread_pkey"), new TableField[] { Thread.THREAD.ID }, true);
    public static final UniqueKey<VisitedUrlRecord> VISITED_URL_PKEY = Internal.createUniqueKey(VisitedUrl.VISITED_URL, DSL.name("visited_url_pkey"), new TableField[] { VisitedUrl.VISITED_URL.URL }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, AssetRecord> ACCOUNT__ACCOUNT_AVATAR_FKEY = Internal.createForeignKey(Account.ACCOUNT, DSL.name("account_avatar_fkey"), new TableField[] { Account.ACCOUNT.AVATAR }, Keys.ASSET_PKEY, new TableField[] { Asset.ASSET.ID }, true);
    public static final ForeignKey<CategoryRecord, CategoryRecord> CATEGORY__CATEGORY_PARENT_FKEY = Internal.createForeignKey(Category.CATEGORY, DSL.name("category_parent_fkey"), new TableField[] { Category.CATEGORY.PARENT }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<PostRecord, AccountRecord> POST__POST_AUTHOR_FKEY = Internal.createForeignKey(Post.POST, DSL.name("post_author_fkey"), new TableField[] { Post.POST.AUTHOR }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<PostRecord, ThreadRecord> POST__POST_THREAD_FKEY = Internal.createForeignKey(Post.POST, DSL.name("post_thread_fkey"), new TableField[] { Post.POST.THREAD }, Keys.THREAD_PKEY, new TableField[] { Thread.THREAD.ID }, true);
    public static final ForeignKey<ThreadRecord, AccountRecord> THREAD__THREAD_AUTHOR_FKEY = Internal.createForeignKey(Thread.THREAD, DSL.name("thread_author_fkey"), new TableField[] { Thread.THREAD.AUTHOR }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<ThreadRecord, CategoryRecord> THREAD__THREAD_CATEGORY_FKEY = Internal.createForeignKey(Thread.THREAD, DSL.name("thread_category_fkey"), new TableField[] { Thread.THREAD.CATEGORY }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
}
